generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Driver {
  id                      Int             @id @default(autoincrement())
  name                    String
  surname                 String
  birthday                DateTime?
  phoneNumber             String?
  alphaPassNumber         String?         @unique
  alphaPassExpireDate     DateTime?
  driverLicenseExpireDate DateTime?
  adr                     ADR
  cargoCard               CargoCard?
  cargoCardNumber         String?
  tachographExpireDate    DateTime?
  nickName                String          @unique
  isActive                Boolean         @default(true)
  adrExpireDate           DateTime?
  cargoCardExpireDate     DateTime?
  holidays                DriverHoliday[]
  slots                   PlanningSlot[]
}

model Truck {
  id                      Int             @id @default(autoincrement())
  licensePlate            String          @unique
  model                   String?
  modelYear               Int?
  chasisNumber            String?         @unique
  genset                  GENSET
  nickName                String          @unique
  insuranceExpireDate     DateTime?
  isActive                Boolean         @default(true)
  slots                   PlanningSlot[]
  transports              Transport[]
  transportLicense        TransportLicense?
  inspections             VehicleInspection[]
  maintenances           VehicleMaintenance[]
}

model Trailer {
  id                      Int             @id @default(autoincrement())
  licensePlate            String          @unique
  model                   String?
  modelYear               Int?
  chasisNumber            String?         @unique
  genset                  GENSET
  nickName                String          @unique
  insuranceExpireDate     DateTime?
  isActive                Boolean         @default(true)
  currentParking          TrailerParking?
  transports              Transport[]
  inspections             VehicleInspection[]
  maintenances           VehicleMaintenance[]
}

model Client {
  id                Int                @id @default(autoincrement())
  name              String
  address           String?
  vatNumber         String?
  isActive          Boolean            @default(true)
  emergencyContacts EmergencyContact[]
  invoiceMails      InvoiceMail[]
  prices            Price[]
  transports        Transport[]
}

model Quay {
  id                Int         @id @default(autoincrement())
  name              String
  quayNumber        Int?
  isLoRo            LoRo?
  address           String?
  terminalFee       Decimal?    @db.Decimal(10, 2)
  workingHoursStart String?
  workingHoursEnd   String?
  isActive          Boolean     @default(true)
  defaultTar        String?
  tarType           TarType?    @default(NONE)
  tarNegativeColor  TarColor?   @default(RED)
  tarPositiveColor  TarColor?   @default(GREEN)
  dropOffTransports Transport[] @relation("dropOffRelation")
  pickUpTransports  Transport[] @relation("pickUpRelation")
}

model FrequentLocation {
  id                    Int                    @id @default(autoincrement())
  name                  String
  city                  String?
  country               String
  postalCode            String?
  km                    Int
  isActive              Boolean                @default(true)
  prices                Price[]
  transportDestinations TransportDestination[]
}

model TransportDestination {
  id                 Int               @id @default(autoincrement())
  transportId        Int
  frequentLocationId Int?
  order              Int
  destinationDate    DateTime
  destinationTime    DateTime?
  eta                DateTime?
  frequentLocation   FrequentLocation? @relation(fields: [frequentLocationId], references: [id])
  transport          Transport         @relation(fields: [transportId], references: [id])

  @@unique([transportId, order])
}

model Transport {
  id                        Int                    @id @default(autoincrement())
  clientId                  Int
  transportOrderNumber      String
  bookingReference          String?
  containerNumber           String?
  loadingUnloadingReference String?
  containerType             String?
  genset                    GENSET
  adr                       ADR                    @default(NO)
  pickUpQuayId              Int?
  dropOffQuayId             Int?
  order                     Int                    @default(0)
  truckId                   Int?
  trailerId                 Int?
  departureDate             DateTime?
  returnDate                DateTime?
  status                    TransportStatus        @default(ACTIVE)
  dropOffTar                String?
  pickUpTar                 String?
  requiresScrCpu            Boolean                @default(true)
  scrCpuColor               ScrCpuColor?           @default(RED)
  scrCpuStatus              ScrCpuStatus?          @default(SCRCPUNOK)
  hasTransportOrder         Boolean                @default(false)
  transportOrderReceivedAt  DateTime?
  currentStatus             TransportCurrentStatus @default(PLANNED)
  dropOffEta                DateTime?
  pickUpEta                 DateTime?
  sentToDriver              Boolean                @default(false)
  scrCpuAssignedToDriver    Boolean                @default(false)
  type                      TransportType
  isCut                     Boolean                @default(false)
  originalTransportId       Int?
  archivedAt                DateTime?
  isArchived                Boolean                @default(false)
  isDeleted                 Boolean                @default(false)
  isRestored                Boolean                @default(false)
  requiresT1                Boolean                @default(false)
  t1Received                Boolean                @default(false)
  dropOffTarPositive        Boolean                @default(false)
  pickUpTarPositive         Boolean                @default(false)
  cutInfo                   CutInfo?
  scrCpuNote                String?                // SCR/CPU ile ilgili not
  client                    Client                 @relation(fields: [clientId], references: [id])
  dropOffQuay               Quay?                  @relation("dropOffRelation", fields: [dropOffQuayId], references: [id])
  originalTransport         Transport?             @relation("CutFromOriginal", fields: [originalTransportId], references: [id])
  cutTransports             Transport[]            @relation("CutFromOriginal")
  pickUpQuay                Quay?                  @relation("pickUpRelation", fields: [pickUpQuayId], references: [id])
  trailer                   Trailer?               @relation(fields: [trailerId], references: [id])
  truck                     Truck?                 @relation(fields: [truckId], references: [id])
  destinations              TransportDestination[]
  notes                     TransportNote[]
  slotAssignments           TransportSlot[]
}

model TransportSlot {
  id          Int           @id @default(autoincrement())
  transportId Int
  slotId      Int?
  date        DateTime
  slotOrder   Int
  slot        PlanningSlot? @relation(fields: [slotId], references: [id])
  transport   Transport     @relation(fields: [transportId], references: [id])

  @@index([transportId])
  @@index([slotId])
}

model TransportLicense {
  id            Int     @id @default(autoincrement())
  licenseNumber String  @unique
  isActive      Boolean @default(true)
  truckId       Int?    @unique
  truck         Truck?  @relation(fields: [truckId], references: [id])
}

model EmergencyContact {
  id          Int     @id @default(autoincrement())
  phoneNumber String?
  name        String?
  clientId    Int
  client      Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model InvoiceMail {
  id       Int     @id @default(autoincrement())
  email    String?
  clientId Int
  client   Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model VehicleInspection {
  id             Int      @id @default(autoincrement())
  inspectionDate DateTime
  notes          String?
  cost           Decimal? @db.Decimal(10, 2)
  truckId        Int?
  trailerId      Int?
  isActive       Boolean  @default(true)
  status         Status   @default(NOT_COMPLETED)
  trailer        Trailer? @relation(fields: [trailerId], references: [id])
  truck          Truck?   @relation(fields: [truckId], references: [id])
}

model VehicleMaintenance {
  id                  Int      @id @default(autoincrement())
  maintenanceDate     DateTime
  notes               String?
  cost                Decimal? @db.Decimal(10, 2)
  truckId             Int?
  trailerId           Int?
  isActive            Boolean  @default(true)
  status              Status   @default(NOT_COMPLETED)
  isGensetMaintenance Boolean  @default(false)
  trailer             Trailer? @relation(fields: [trailerId], references: [id])
  truck               Truck?   @relation(fields: [truckId], references: [id])
}

model DriverHoliday {
  id        Int           @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  reason    HolidayReason
  notes     String?
  driverId  Int
  driver    Driver        @relation(fields: [driverId], references: [id])
}

model PlanningSlot {
  id              Int             @id @default(autoincrement())
  date            DateTime
  slotNumber      Int
  order           Int             @default(0)
  isActive        Boolean         @default(true)
  driverId        Int?
  truckId         Int?
  driverStartNote String?
  driver          Driver?         @relation(fields: [driverId], references: [id])
  truck           Truck?          @relation(fields: [truckId], references: [id])
  transports      TransportSlot[]

  @@unique([date, order])
}

model TransportNote {
  id          String    @id @default(cuid())
  content     String
  color       String
  transportId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  transport   Transport @relation(fields: [transportId], references: [id], onDelete: Cascade)

  @@index([transportId])
}

model Price {
  id                 Int              @id @default(autoincrement())
  clientId           Int
  basePrice          Float
  dieselSurcharge    Float?
  roadTax            Float?
  gensetPrice        Float?
  frequentLocationId Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  isFixedPrice       Boolean          @default(false)
  client             Client           @relation(fields: [clientId], references: [id])
  frequentLocation   FrequentLocation @relation(fields: [frequentLocationId], references: [id])

  @@unique([clientId, frequentLocationId])
}

model CutLocation {
  id             Int              @id @default(autoincrement())
  name           String
  isDefault      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  cutInfos       CutInfo[]
  parkedTrailers TrailerParking[]
}

model CutInfo {
  id             Int          @id @default(autoincrement())
  transportId    Int          @unique
  cutType        String
  cutStartDate   DateTime
  cutEndDate     DateTime?
  locationId     Int?
  customLocation String?
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  location       CutLocation? @relation(fields: [locationId], references: [id])
  transport      Transport    @relation(fields: [transportId], references: [id])
}

model TrailerParking {
  id         Int         @id @default(autoincrement())
  trailerId  Int         @unique
  locationId Int
  parkedAt   DateTime    @default(now())
  notes      String?
  location   CutLocation @relation(fields: [locationId], references: [id])
  trailer    Trailer     @relation(fields: [trailerId], references: [id], onDelete: Cascade)

  @@index([trailerId])
  @@index([locationId])
}

enum LoRo {
  LO
  RO
  TBN
}

enum GENSET {
  NO
  YES
}

enum ADR {
  NO
  YES
}

enum CargoCard {
  NO
  YES
}

enum HolidayReason {
  ANNUAL_LEAVE
  SICK_LEAVE
  UNPAID_LEAVE
  BEREAVEMENT_LEAVE
  MARRIAGE_LEAVE
  OTHER
}

enum Status {
  COMPLETED
  NOT_COMPLETED
}

enum TransportStatus {
  ACTIVE
  ON_HOLD
}

enum TarType {
  PICKUP
  DROPOFF
  BOTH
  NONE
}

enum ScrCpuStatus {
  SCRCPUNOK
  SCROK
  CPUOK
}

enum ScrCpuColor {
  RED
  ORANGE
  GREEN
}

enum TransportCurrentStatus {
  PLANNED
  ONGOING
  COMPLETED
  CUT
}

enum TransportType {
  IMPORT
  EXPORT
  SHUNT
}

enum CutType {
  TRAILER
  CONTAINER
  BOTH
}

enum TarColor {
  RED
  ORANGE
  YELLOW
  GREEN
  BLUE
  PURPLE
  TEAL
  GRAY
}
